rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    function isSignedIn() { return request.auth != null; }

    
    function isImageOrVideoMime() {
      return request.resource.contentType != null &&
        (request.resource.contentType.matches('image/.*') ||
         request.resource.contentType.matches('video/.*'));
    }
    function hasSafeExt() {
      return request.resource.name.matches('.*\\.(?i)(jpg|jpeg|png|gif|webp|mp4|mov|webm)$');
    }
    function fileOk() {
      return request.resource.size != null &&
             request.resource.size <= 10 * 1024 * 1024 &&
             (isImageOrVideoMime() || hasSafeExt());
    }

    // 在路径上引入 {uid}，便于在 list 阶段按路径就拦截
    match /forms/{formId}/images/{uid}/{allPaths=**} {
      // 列表（list）：只能列出自己的目录
      allow list: if isSignedIn() && request.auth.uid == uid;

      // 读取单个对象（get）：只能读取自己拥有（owner）的文件
      allow get: if isSignedIn() && resource.metadata.owner == request.auth.uid;

      // 新建：大小/类型校验 + 必须写入 owner 且与当前登录者一致
      allow create: if isSignedIn()
                    && fileOk()
                    && request.resource.metadata.owner == request.auth.uid;

      // 更新：只有 owner 可更新 + 仍需大小/类型校验 + 禁止篡改 owner
      allow update: if isSignedIn()
                    && resource.metadata.owner == request.auth.uid
                    && fileOk()
                    && request.resource.metadata.owner == resource.metadata.owner;

      // 删除：只有 owner 可删
      allow delete: if isSignedIn()
                    && resource.metadata.owner == request.auth.uid;
    }
  }
}
